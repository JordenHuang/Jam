program        → (declaration | htmlStmt)* EOF ;

declaration    → varDecl
               | includeStmt
               | statement ;

htmlStmt       → HTML ; // 來自 lexer 的 HTML token（非 Java 語法部分）

varDecl        → type IDENTIFIER ("=" expression)? ";"* ;

type           → "int" | "float" | "double" | "char" | "String" 
               | "boolean" | "short" | "long" 
               | IDENTIFIER ; // 支援非 primitive 的自訂型別

includeStmt    → "include" STRING ";"* ;

statement      → exprStmt
               | ifStmt
               | forStmt
               | whileStmt
               | block ;

exprStmt       → expression ";"* | HTML ;

ifStmt         → "if" "(" expression ")" statement ("else" statement)? ;

forStmt        → "for" "(" (varDecl | exprStmt | ";") expression? ";" expression? ")" statement ;

whileStmt      → "while" "(" expression ")" statement ;

block          → "{" declaration* "}" ;

expression     → assignment_expr ;

// TODO
assignment_expr  → conditional_expr
                 | assignment ;
// TODO
conditional_expr → logic_or
                 | logic_or "?" expression ":" conditional_expr ;
// TODO
assignment       → left_hand_side assignment_op assignment ;
// TODO
left_hand_side   → expr_name | field_access | array_access ;
// TODO
assignment_op    → = | *= | /= | %= | += | -= | <<= | >>= | >>>= | &= | ^= | |= ;
// TODO
expr_name        → IDENTIFIER
                 | ambiguous_name "." IDENTIFIER ;
// TODO
ambiguous_name   → IDENTIFIER
                 | ambiguous_name "." IDENTIFIER ;
// TODO
field_access     → <primary> "." IDENTIFIER
                 | super "." IDENTIFIER ;
// TODO
array_access     → expr_name "[" expression "]" ;

logic_or       → logic_and ( "||" logic_and )* ;
logic_and      → equality ( "&&" equality )* ;

equality       → comparison ( ( "==" | "!=" ) comparison )* ;
comparison     → term ( ( "<" | "<=" | ">" | ">=" ) term )* ;
term           → factor ( ( "+" | "-" ) factor )* ;
factor         → unary ( ( "*" | "/" ) unary )* ;

unary          → ( "!" | "-" ) unary
               | primary ;
//               | call ; // <- TODO

// TODO
// call           → primary ( "(" arguments? ")" )* ;

arguments      → expression ( "," expression )* ;

primary        → "true" | "false" | "null"
               | NUMBER | STRING | CHAR
               | IDENTIFIER
               | "(" expression ")" ;
